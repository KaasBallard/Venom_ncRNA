#!/bin/bash

<<'Step5-Run_miRanda'
This script is how I ran miRanda for the 3'UTR, 5'UTR, and CDS. This script
runs miRanda with the C. viridis genomes and the mir.fasta generated by ShortStack.
Previous step: BEDtools_getfasta_for_three_features_2025.01.12.sh (/home/administrator/Documents/Kaas/Venom_ncRNA_project/Scripts/BEDtools/Genome_Chunking_for_miRanda/2025-01-12/BEDtools_getfasta_for_three_features_2025.01.12.sh)
Next step: miRanda_output_formating_2025.01.13.sh (/home/administrator/Documents/Kaas/Venom_ncRNA_project/Scripts/miRanda/miranda_formating/miRanda_output_formating_2025.01.13.sh)
Step5-Run_miRanda

# Activate the needed conda/mamba environment
source /home/administrator/miniforge3/bin/activate miRanda

# Define variables:
# mirna_file or the RNA sequence to be compared to genomes:
mirna_file="/home/administrator/Documents/Kaas/Venom_ncRNA_project/Usable_data/miRanda_mirna_inputs_from_shortstack/2024-5-13_Run/Post_clean/mature_mir.fasta"

# Genomes or the genomic DNA/RNA sequence, alignment procedure uses complementarity and not sequence identity:
genomes_dir="/home/administrator/Documents/Kaas/Venom_ncRNA_project/Results/bcftools/fasta_files/feature_files"

# Add genomes to an array
genomes=()
while IFS= read -r fasta; do
    genomes+=("$fasta")
done < <(find "$genomes_dir" -type f -name "*.fasta")
# Check if genomes array is empty
if [ ${#genomes[@]} -eq 0 ]; then
    echo "Error: No genome FASTA files found in $genomes_dir"
    exit 1
fi
echo "The following FASTA files will be processed:"
printf '%s\n' "${genomes[@]}"

# Name of location for the output file:
output_dir="/home/administrator/Documents/Kaas/Venom_ncRNA_project/Results/miRanda/miRanda_2025-01-12"
[ ! -d "$output_dir" ] && mkdir -p "$output_dir"

# Run the program:
# Actually run the program:
for genome in "${genomes[@]}"; do

    # Let the user know what FASTA is being worked on
    echo "FASTA file: $genome currently being proccessed"
    
    # Extract the genome name without the path for the directory
    genome_name=$(basename "$genome" .fasta)

    # Create new file name for the output
    output_file="${output_dir}/${genome_name}_miranda_miRNA_targets.out"

    # Check if the output file already exists
    if [ -f "$output_file" ]; then
        echo "Preexisting miRanda run for $output_file detected. Skipping."
        continue
    fi

    echo "No preexisting miRanda run for $output_file detected. Running miRanda."

    # Run miRanda
    miranda "$mirna_file" "$genome" -out "$output_file"

    # Get exit status of miRanda
    exit_status=$?

    # Check the exit status of miRanda
    if [ $exit_status -ne 0 ]; then
        echo "Error: miRanda failed for $genome with exit code $exit_status. Deleting incomplete file."
        rm -f "$output_file"  # Delete incomplete output file
        echo "Incomplete output file deleted. Proceeding to the next genome."
    else
        echo "miRanda completed successfully for $genome."
    fi
done